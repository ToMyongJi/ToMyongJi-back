name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches:
      - main

permissions:  
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Create application.properties
        run: |
            mkdir -p ./src/main/resources
            echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
      - name: Check application.properties contents
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES }}"

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test


      - name: Docker build & push to prod
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tomyongji:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/tomyongji:latest

      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: echo 'SSH connection successful'
      
      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: /home/ubuntu/
          
      - name: Copy config to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          source: ./nginx/conf.d/nginx.conf
          target: /home/ubuntu/
          
    
      - name: Deploy to prod 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/
            sudo docker-compose down --volumes --remove-orphans  # 기존 컨테이너, 볼륨, 사용되지 않는 네트워크 제거
            sudo docker-compose pull  # 변경된 이미지를 가져옴
            sudo docker-compose up -d  # 컨테이너를 백그라운드에서 실행
            sudo docker system prune -af  # 사용하지 않는 Docker 객체(이미지, 컨테이너, 볼륨, 네트워크) 제거
            sudo docker volume prune -f  # 사용하지 않는 볼륨 제거

